uniform highp float outline_width; // = 2.0;
uniform highp vec4 outline_color; // = vec4(1.0, 0.0, 0.0, 0.33);
uniform bool outline_fullbright; // = false;
uniform highp float light_boost; // = 4.0;
uniform highp float light_gamma; // = 1.0;
uniform highp float light_whitepoint; // = 1.0;
uniform highp float time; // Время для анимации градиента

void fragment() {
    highp vec4 col = zTexture(UV);
    highp vec2 ps = TEXTURE_PIXEL_SIZE;
    highp float a;
    highp float maxa = col.a;
    highp float mina = col.a;

    // Движущийся градиент: добавляем эффект прозрачности, зависящей от времени
    highp float gradient = 0.5 + 0.5 * sin(time * 2.0); // Синусоидальный градиент, колеблющийся от 0 до 1
    highp vec4 dynamic_outline_color = vec4(outline_color.rgb, gradient * outline_color.a);

    // Проверка альфа-канала соседних пикселей
    a = texture2D(TEXTURE, UV + vec2(0.0, -outline_width) * ps).a;
    maxa = max(a, maxa);
    mina = min(a, mina);

    a = texture2D(TEXTURE, UV + vec2(-outline_width, -outline_width) * ps).a;
    maxa = max(a, maxa);
    mina = min(a, mina);

    a = texture2D(TEXTURE, UV + vec2(0.0, outline_width) * ps).a;
    maxa = max(a, maxa);
    mina = min(a, mina);

    a = texture2D(TEXTURE, UV + vec2(outline_width, -outline_width) * ps).a;
    maxa = max(a, maxa);
    mina = min(a, mina);

    a = texture2D(TEXTURE, UV + vec2(-outline_width, 0.0) * ps).a;
    maxa = max(a, maxa);
    mina = min(a, mina);

    a = texture2D(TEXTURE, UV + vec2(-outline_width, outline_width) * ps).a;
    maxa = max(a, maxa);
    mina = min(a, mina);

    a = texture2D(TEXTURE, UV + vec2(outline_width, 0.0) * ps).a;
    maxa = max(a, maxa);
    mina = min(a, mina);

    a = texture2D(TEXTURE, UV + vec2(outline_width, outline_width) * ps).a;
    maxa = max(a, maxa);
    mina = min(a, mina);

    // Расчет яркости обводки
    lowp float sampledLight = outline_fullbright ? 1.0 : clamp((pow(zGrayscale_BT601(lightSample.rgb) * light_whitepoint, light_gamma) / light_whitepoint) * light_boost, 0.0, 1.0);

    // Наложение обводки с движущимся градиентом прозрачности
    COLOR = mix(col, dynamic_outline_color * vec4(vec3(1.0), sampledLight), maxa - col.a);

    // Завершающий шаг
    lightSample = vec3(1.0);
}
