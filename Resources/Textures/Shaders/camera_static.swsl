// Credited to PelicanPolice on Shadertoy
// Free for any purpose, commercial or otherwise.

highp float noise(highp vec2 pos, highp float evolve) {
    highp float e = fract((evolve * 0.01));
    highp float cx  = pos.x * e;
    highp float cy  = sin(pos.y * e * 376.0);

    highp float v2_2 = cx * 2.4 / cy * 23.0 + pow(abs(cy / 22.4), 3.3);
    highp float v2_1 = fract(fract(v2_2));
    highp float v2 = fract(2.0 / v2_1);
    highp float v3 = fract(cx * evolve / pow(abs(cy), 0.050));

    return fract(0.1 * v2 * v3);
}

void fragment() {
    // Масштабируем координаты, чтобы сделать зернистость крупнее
    highp vec2 coords = FRAGCOORD.xy * 0.5; // Измените коэффициент для настройки размера зернистости

    highp vec3 colour;

    // Интенсивность шума (эффект зернистости)
    int intensity = 1;
    for (int i = 0; i < intensity; i++) {
        colour = vec3(noise(coords, TIME));
    }

    // Добавляем холодный синий оттенок, менее интенсивный
    highp vec3 coldTint = vec3(0.1, 0.15, 0.8); // Холодный оттенок синего
    float coldIntensity = 0.2; // Интенсивность холодного оттенка
    colour = mix(colour, coldTint, coldIntensity);

    // Увеличиваем контраст (настройте фактор контраста при необходимости)
    float contrast = 1.5; // Фактор контраста
    colour = pow(colour, vec3(contrast));

    // Вывод на экран
    COLOR = vec4(colour, 1.0);
}
